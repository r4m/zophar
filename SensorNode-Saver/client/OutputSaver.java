/*
 * Copyright (c) 2010, Department of Information Engineering, University of Padova.
 * All rights reserved.
 *
 * This file is part of Zophar.
 *
 * Zophar is free software: you can redistribute it and/or modify it under the terms
 * of the GNU General Public License as published by the Free Software Foundation,
 * either version 3 of the License, or (at your option) any later version.
 *
 * Zophar is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
 * PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Zophar.  If not, see <http://www.gnu.org/licenses/>.
 *
 * ===================================================================================
 */

/**
 *
 * This is the application of the user interface. It shows the payload of the package
 * sent by a single node and save the data to a TXT file.
 *
 * See the help of this program calling java OutputSaver -h
 * 
 * @author Filippo Zanella <filippo.zanella@dei.unipd.it>
 */
 
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintStream;
import java.util.Calendar;
import java.util.Vector;
import net.tinyos.message.Message;
import net.tinyos.message.MessageListener;
import net.tinyos.message.MoteIF;
import net.tinyos.packet.BuildSource;
import net.tinyos.packet.PhoenixSource;
import net.tinyos.util.PrintStreamMessenger;


public class OutputSaver  implements MessageListener
{
	private MoteIF mote;
	private PhoenixSource phoenix;
	private MatricesArgs MatricesArgsMsg;

	private Vector<MatricesArgs> MatricesArgsVector;

	private Calendar cal;

	public FileOutputStream outputFile;
	public PrintStream output;

	private Vector<Long> time;
	private Long startTime;

	double beta;
	double gamma;

	int csgNodeID;
	
	private static int AVOID_ROUND = 10;

	public OutputSaver(MoteIF mif, String file, String source) {
		try
		{

			MatricesArgsVector = new Vector<MatricesArgs>();
			time = new Vector<Long>();
			outputFile = new FileOutputStream(file + ".txt");
			output = new PrintStream(outputFile);
			output.println("##File generated by OutputSaver ##");
			String curTime = (Calendar.getInstance().getTime()).toString();
			output.println(curTime);
			output.println("");
			output.println("CSG ID\tBETA\tGAMMA\tTIME(s)\tA[1][1]\tA[1][2]\tA[2][1]\tA[2][2]\tB[1]\tB[2]");
			output.println("");
			System.err.println("Copyright (c) 2010, Department of Information Engineering, University of Padova.");
			System.err.println("");
			System.out.print("Connecting to serial port...");
			mote = mif;

			mote.registerListener(new MatricesArgs(), this);
		}
		catch (IOException ioex) {
			System.err.println("Exception thrown when creating a file. Exiting.");
			System.err.println(ioex);
		}
		catch (Exception ex) {
			System.err.println("Couldn't contact serial port.");
			System.err.println(ex);
		}
		System.out.println("done.");
		System.out.println("Connected with " + source +  ".");
		System.out.println("OutputSaver started.");
		System.out.println("Saving data to file " + file + ".txt.");

		System.out.println("OutputSaver succesfully started.");
	}

	synchronized public void messageReceived(int dest, Message m) {
		if (m instanceof MatricesArgs) {
			MatricesArgsMsg = (MatricesArgs) m;

			channelEstimation();
			long curTime = (Calendar.getInstance()).getTimeInMillis()/1000;
			time.addElement(curTime);
			try
			{
				output.println(csgNodeID + "\t" + cutNumber(beta,7) + "\t" + cutNumber(gamma,7) + "\t" + curTime + "\t" +
					((double)MatricesArgsMsg.get_Xi11())/AVOID_ROUND + "\t" +
					MatricesArgsMsg.get_Xi12() + "\t" +
					MatricesArgsMsg.get_Xi21() + "\t" +
					MatricesArgsMsg.get_Xi22()+ "\t" +
					MatricesArgsMsg.get_Psi1() + "\t" +
					MatricesArgsMsg.get_Psi2());
			} catch (Exception e)
			{
				System.err.println("Exception thrown when writing the outputs.Exiting.");
			}
			MatricesArgsVector.addElement(MatricesArgsMsg);
		}
	}

	public void channelEstimation() {
		double det;

		double Xi11 = ((double)MatricesArgsMsg.get_Xi11())/AVOID_ROUND;
		double Xi12 = MatricesArgsMsg.get_Xi12();
		double Xi21 = MatricesArgsMsg.get_Xi21();
		double Xi22 = MatricesArgsMsg.get_Xi22();
		double Psi1 = MatricesArgsMsg.get_Psi1();
		double Psi2 = MatricesArgsMsg.get_Psi2();
		/*
		System.out.println("A11 " + Xi11);
		System.out.println("A12 " + Xi12);
		System.out.println("A21 " + Xi21);
		System.out.println("A22 " + Xi22);
		System.out.println("B1 " + Psi1);
		System.out.println("B2 " + Psi2);
		*/
		beta = 0;
		gamma = 0;
		csgNodeID = MatricesArgsMsg.get_nodeID();

		det = (Xi11) * (Xi22) - (Xi12) * (Xi21);
		if (det != 0) {
			beta = ((Xi22) * (Psi1) - (Xi21) * (Psi2)) / det;
			gamma = ((Xi11) * (Psi2) - (Xi12) * (Psi1)) / det;
			System.out.println(" Node[" + csgNodeID +"]");
			System.out.println(" Beta = " + cutNumber(beta,7));
			System.out.println(" Gamma = " + cutNumber(gamma,7));
		}
	}

	public String cutNumber(double str, int pos) {
		String s = str + "";
		if(pos>s.length())
			pos = s.length();
		return s.substring(0,pos);
	}

	private static void usage() {
		System.err.println("usage: OutputSaver [options] [-comm SOURCE] [-f FILE]");
		System.err.println("options:");
		System.err.println("-h\t\t Show this help");
		System.err.println("[-comm SOURCE]\t Set the serial source connection");
		System.err.println("[-f FILE]\t Save the data to a <FILE>.txt");
		System.err.println("");
		System.err.println("The default command is: OutputSaver -comm serial@/dev/ttyUSB0:tmote -f data");
	}

	public static void main(String args[]) {
		String  source = "serial@/dev/ttyUSB0:tmote";
		String  file = "dati";

		if(args.length == 1) {
			if (!args[0].equals("-h")) {
				usage();
				System.exit(1);
			}
		}
		if (args.length == 2) {
			if (!args[0].equals("-comm")) {
				usage();
				System.exit(1);
			}
			source = args[1];
		}
		else if (args.length == 4) {
			if (!args[0].equals("-comm")) {
				usage();
				System.exit(1);
			}
			source = args[1];
			file = args[3];
		}
		else if (args.length != 0) {
			usage();
			System.exit(1);
		}

		PhoenixSource phoenix;
		try
		{
			if (source == null) {
				phoenix = BuildSource.makePhoenix(PrintStreamMessenger.err);
			}
			else {
				phoenix = BuildSource.makePhoenix(source, PrintStreamMessenger.err);
			}
			MoteIF mif = new MoteIF(phoenix);
			new OutputSaver(mif,file,source);
		}
		catch(NullPointerException ex) {
			System.out.println("Device not connected.");
			System.exit(1);
		}
	}
}
