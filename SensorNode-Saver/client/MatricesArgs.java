/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'MatricesArgs'
 * message type.
 */

public class MatricesArgs extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 13;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 93;

    /** Create a new MatricesArgs of size 13. */
    public MatricesArgs() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new MatricesArgs of the given data_length. */
    public MatricesArgs(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new MatricesArgs with the given data_length
     * and base offset.
     */
    public MatricesArgs(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new MatricesArgs using the given byte array
     * as backing store.
     */
    public MatricesArgs(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new MatricesArgs using the given byte array
     * as backing store, with the given base offset.
     */
    public MatricesArgs(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new MatricesArgs using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public MatricesArgs(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new MatricesArgs embedded in the given message
     * at the given base offset.
     */
    public MatricesArgs(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new MatricesArgs embedded in the given message
     * at the given base offset and length.
     */
    public MatricesArgs(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <MatricesArgs> \n";
      try {
        s += "  [Xi11=0x"+Long.toHexString(get_Xi11())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [Xi12=0x"+Long.toHexString(get_Xi12())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [Xi21=0x"+Long.toHexString(get_Xi21())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [Xi22=0x"+Long.toHexString(get_Xi22())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [Psi1=0x"+Long.toHexString(get_Psi1())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [Psi2=0x"+Long.toHexString(get_Psi2())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [nodeID=0x"+Long.toHexString(get_nodeID())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: Xi11
    //   Field type: short, unsigned
    //   Offset (bits): 0
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'Xi11' is signed (false).
     */
    public static boolean isSigned_Xi11() {
        return false;
    }

    /**
     * Return whether the field 'Xi11' is an array (false).
     */
    public static boolean isArray_Xi11() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'Xi11'
     */
    public static int offset_Xi11() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'Xi11'
     */
    public static int offsetBits_Xi11() {
        return 0;
    }

    /**
     * Return the value (as a short) of the field 'Xi11'
     */
    public short get_Xi11() {
        return (short)getSIntBEElement(offsetBits_Xi11(), 16);
    }

    /**
     * Set the value of the field 'Xi11'
     */
    public void set_Xi11(short value) {
        setSIntBEElement(offsetBits_Xi11(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'Xi11'
     */
    public static int size_Xi11() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'Xi11'
     */
    public static int sizeBits_Xi11() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: Xi12
    //   Field type: short, unsigned
    //   Offset (bits): 16
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'Xi12' is signed (false).
     */
    public static boolean isSigned_Xi12() {
        return false;
    }

    /**
     * Return whether the field 'Xi12' is an array (false).
     */
    public static boolean isArray_Xi12() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'Xi12'
     */
    public static int offset_Xi12() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'Xi12'
     */
    public static int offsetBits_Xi12() {
        return 16;
    }

    /**
     * Return the value (as a short) of the field 'Xi12'
     */
    public short get_Xi12() {
        return (short)getSIntBEElement(offsetBits_Xi12(), 16);
    }

    /**
     * Set the value of the field 'Xi12'
     */
    public void set_Xi12(short value) {
        setSIntBEElement(offsetBits_Xi12(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'Xi12'
     */
    public static int size_Xi12() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'Xi12'
     */
    public static int sizeBits_Xi12() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: Xi21
    //   Field type: short, unsigned
    //   Offset (bits): 32
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'Xi21' is signed (false).
     */
    public static boolean isSigned_Xi21() {
        return false;
    }

    /**
     * Return whether the field 'Xi21' is an array (false).
     */
    public static boolean isArray_Xi21() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'Xi21'
     */
    public static int offset_Xi21() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'Xi21'
     */
    public static int offsetBits_Xi21() {
        return 32;
    }

    /**
     * Return the value (as a short) of the field 'Xi21'
     */
    public short get_Xi21() {
        return (short)getSIntBEElement(offsetBits_Xi21(), 16);
    }

    /**
     * Set the value of the field 'Xi21'
     */
    public void set_Xi21(short value) {
        setSIntBEElement(offsetBits_Xi21(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'Xi21'
     */
    public static int size_Xi21() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'Xi21'
     */
    public static int sizeBits_Xi21() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: Xi22
    //   Field type: short, unsigned
    //   Offset (bits): 48
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'Xi22' is signed (false).
     */
    public static boolean isSigned_Xi22() {
        return false;
    }

    /**
     * Return whether the field 'Xi22' is an array (false).
     */
    public static boolean isArray_Xi22() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'Xi22'
     */
    public static int offset_Xi22() {
        return (48 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'Xi22'
     */
    public static int offsetBits_Xi22() {
        return 48;
    }

    /**
     * Return the value (as a short) of the field 'Xi22'
     */
    public short get_Xi22() {
        return (short)getSIntBEElement(offsetBits_Xi22(), 16);
    }

    /**
     * Set the value of the field 'Xi22'
     */
    public void set_Xi22(short value) {
        setSIntBEElement(offsetBits_Xi22(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'Xi22'
     */
    public static int size_Xi22() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'Xi22'
     */
    public static int sizeBits_Xi22() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: Psi1
    //   Field type: short, unsigned
    //   Offset (bits): 64
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'Psi1' is signed (false).
     */
    public static boolean isSigned_Psi1() {
        return false;
    }

    /**
     * Return whether the field 'Psi1' is an array (false).
     */
    public static boolean isArray_Psi1() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'Psi1'
     */
    public static int offset_Psi1() {
        return (64 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'Psi1'
     */
    public static int offsetBits_Psi1() {
        return 64;
    }

    /**
     * Return the value (as a short) of the field 'Psi1'
     */
    public short get_Psi1() {
        return (short)getSIntBEElement(offsetBits_Psi1(), 16);
    }

    /**
     * Set the value of the field 'Psi1'
     */
    public void set_Psi1(short value) {
        setSIntBEElement(offsetBits_Psi1(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'Psi1'
     */
    public static int size_Psi1() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'Psi1'
     */
    public static int sizeBits_Psi1() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: Psi2
    //   Field type: short, unsigned
    //   Offset (bits): 80
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'Psi2' is signed (false).
     */
    public static boolean isSigned_Psi2() {
        return false;
    }

    /**
     * Return whether the field 'Psi2' is an array (false).
     */
    public static boolean isArray_Psi2() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'Psi2'
     */
    public static int offset_Psi2() {
        return (80 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'Psi2'
     */
    public static int offsetBits_Psi2() {
        return 80;
    }

    /**
     * Return the value (as a short) of the field 'Psi2'
     */
    public short get_Psi2() {
        return (short)getSIntBEElement(offsetBits_Psi2(), 16);
    }

    /**
     * Set the value of the field 'Psi2'
     */
    public void set_Psi2(short value) {
        setSIntBEElement(offsetBits_Psi2(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'Psi2'
     */
    public static int size_Psi2() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'Psi2'
     */
    public static int sizeBits_Psi2() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: nodeID
    //   Field type: short, unsigned
    //   Offset (bits): 96
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'nodeID' is signed (false).
     */
    public static boolean isSigned_nodeID() {
        return false;
    }

    /**
     * Return whether the field 'nodeID' is an array (false).
     */
    public static boolean isArray_nodeID() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'nodeID'
     */
    public static int offset_nodeID() {
        return (96 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'nodeID'
     */
    public static int offsetBits_nodeID() {
        return 96;
    }

    /**
     * Return the value (as a short) of the field 'nodeID'
     */
    public short get_nodeID() {
        return (short)getUIntBEElement(offsetBits_nodeID(), 8);
    }

    /**
     * Set the value of the field 'nodeID'
     */
    public void set_nodeID(short value) {
        setUIntBEElement(offsetBits_nodeID(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'nodeID'
     */
    public static int size_nodeID() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'nodeID'
     */
    public static int sizeBits_nodeID() {
        return 8;
    }

}
